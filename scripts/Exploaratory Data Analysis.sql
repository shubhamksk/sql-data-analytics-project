--1. Database Exploration
--Explore ALL objects in the Database
SELECT * FROM INFORMATION_SCHEMA.TABLES;

--Explore ALL Columns in the Database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers';

--2. Dimension Exploration
--Explore the Dimension Country 
SELECT DISTINCT country FROM gold.dim_customers;

--3. Explore ALL Categories "The major Divisions"
SELECT DISTINCT category, subcategory, product_name FROM gold.dim_products;

--4. Find the Date of the First and Last Order.
SELECT 
MIN(order_date) AS first_order_date,
MAX(order_date) AS last_order_date,
DATEDIFF(YEAR, MIN(order_date), MAX(order_date)) as order_range_years,
DATEDIFF(MONTH, MIN(order_date), MAX(order_date)) as order_range_months,
DATEDIFF(DAY, MIN(order_date), MAX(order_date)) as order_range_days
FROM gold.fact_sales;

--5.Find the youngest and the oldest customer
SELECT
MIN(birthdate) AS oldest_birthdate,
DATEDIFF(YEAR,MIN(birthdate),GETDATE()) AS oldest_age,
MAX(birthdate) AS youngest_birthdate,
DATEDIFF(YEAR,MAX(birthdate),GETDATE()) AS youngest_age
FROM gold.dim_customers

--Measures Exploration
--6.Find the Total Sales
SELECT SUM(sales_amount) Total_Sales FROM gold.fact_sales;

--7.Find how many items are Sold
SELECT SUM(quantity) Total_Quantity FROM gold.fact_sales;

--8.Find the Average Selling Price
SELECT AVG(price) Average_Price FROM gold.fact_sales;

--9.Find the Total Number of Orders
SELECT COUNT(order_number) Total_Orders FROM gold.fact_sales;
SELECT COUNT(DISTINCT order_number) Total_Orders FROM gold.fact_sales; --Dont count the same orders twice insider our Sales
--Always try to compare the numbers before and after using Distinct

--10.Find the total number of Products
SELECT  COUNT(DISTINCT product_key) Total_Products FROM gold.dim_products;
SELECT  COUNT(product_key) Total_Products FROM gold.dim_products;
SELECT  COUNT(product_name) Total_Products FROM gold.dim_products; 
SELECT  COUNT(product_name) Total_Products FROM gold.dim_products; 
--COUNT and COUNT DISTINCT gave the same number of Product, Hence , No duplicates.

--11.Find the total number of Customers
SELECT COUNT(DISTINCT customer_key) Total_Customers FROM gold.dim_customers;
SELECT COUNT(customer_key) Total_Customers FROM gold.dim_customers;

--12.Find the total number of Customers that have placed an Order
SELECT  COUNT(customer_key) Total_Customers 
FROM gold.fact_sales
WHERE order_number IS NOT NULL;

SELECT  COUNT(DISTINCT customer_key) Total_Customers 
FROM gold.fact_sales
WHERE order_number IS NOT NULL;

SELECT COUNT(customer_key) Total_Customers 
FROM gold.fact_sales 
SELECT COUNT(DISTINCT customer_key) Total_Customers 
FROM gold.fact_sales --We didnt use IN NOT NULL because we are already in the Sales Table.

--Collect all the key numbers in a single query to have a Business Report Overview.
--Generate a Report that shows all key metrics of the Business.
SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity' AS measure_name, SUM(quantity) measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Average Price' AS measure_name, AVG(price) measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Orders' AS measure_name, COUNT(DISTINCT order_number) measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Products' AS measure_name, COUNT(DISTINCT product_key) measure_value FROM gold.dim_products
UNION ALL
SELECT 'Total Customers' AS measure_name, COUNT(DISTINCT customer_key) measure_value FROM gold.dim_customers
UNION ALL
SELECT 'Total Customers with Orders Placed' AS measure_name, COUNT(DISTINCT customer_key) measure_value
FROM gold.fact_sales 

--Measure by Dimesnion Calculating the Magnitude
--13. Find the total Customers by Countries
SELECT country, COUNT(customer_key) AS Total_Customers 
FROM gold.dim_customers
GROUP BY country 
ORDER BY Total_Customers DESC

--14. Find Total Customers by Gender
SELECT gender, COUNT(customer_id) AS Total_Customers 
FROM gold.dim_customers
GROUP BY gender
ORDER BY Total_Customers DESC
--15. Find Total Products by Category
SELECT category, COUNT(product_key) AS Total_Products 
FROM gold.dim_products
GROUP BY category
ORDER BY Total_Products DESC

--16. What is the average costs in each category?
SELECT category, COUNT(product_key) AS Total_Products , AVG(cost) AS Average_Cost
FROM gold.dim_products
GROUP BY category
ORDER BY Average_Cost DESC

--17.What is total Revenue Generated for each Category?
SELECT 
d.category, 
SUM(f.sales_amount) AS Total_Revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products d   --Use a Left Join , as using an Inner Join, we can loose some of the data which has no matches
ON f.product_key = d.product_key
GROUP BY d.category
ORDER BY Total_Revenue DESC

--18. Find the Total Revenue Generated by Each Customer?
SELECT 
d.customer_key,
d.first_name,
d.last_name,
SUM(f.sales_amount) AS Total_Revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers d 
ON f.customer_key = d.customer_key
GROUP BY d.customer_key,d.first_name,d.last_name
ORDER BY Total_Revenue DESC

--19. What is the distribution of sold items across countries?
--Finding the Total Quantity by different Countries
SELECT
d.country,
SUM(f.quantity) AS Total_Items_Sold
FROM gold.fact_sales f 
LEFT JOIN gold.dim_customers d
ON f.customer_key=d.customer_key
GROUP BY d.country
ORDER BY Total_Items_Sold DESC


--Ranking Analysis
/*We can filter out the Top N products by using the keywords:
1. TOP
2. RANK()
3. DENSERANK()
4. ROW_NUMBER()*/

/*Using Group By clause along with TOP function*/
--20. Which 5 Products generate the highest revenue?
--TOP function (Need to Sort Data from Highest to Lowest in a DESC order)
SELECT TOP 5
d.product_name,
SUM(f.sales_amount) AS Total_Revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products d
ON f.product_key = d.product_key
GROUP BY d.product_name
ORDER BY Total_Revenue DESC

--21. What are the 5 worst-performing products in terms of Sales?
--TOP function (Need to Sort Data from Lowest to Highest in a DESC order)
SELECT TOP 5
d.product_name,
SUM(f.sales_amount) AS Total_Revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products d
ON f.product_key = d.product_key
GROUP BY d.product_name
ORDER BY Total_Revenue ASC

--20. Which 5 Sub-Categories generate the highest revenue?
--TOP function (Need to Sort Data from Highest to Lowest in a DESC order)
SELECT TOP 5
d.subcategory,
SUM(f.sales_amount) AS Total_Revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products d
ON f.product_key = d.product_key
GROUP BY d.subcategory
ORDER BY Total_Revenue DESC

/*WINDOW FUNCTIONS: For more flexible and complex queries with extra details*/
--We can use a subquery and window functions together for Ranking Analysis
--ROW_NUMBER()
SELECT * 
FROM (
		SELECT
		d.product_name,
		SUM(f.sales_amount) AS Total_Revenue,
		ROW_NUMBER() OVER (ORDER BY SUM(f.sales_amount) DESC) AS rank_products
		FROM gold.fact_sales f
		LEFT JOIN gold.dim_products d
		ON f.product_key = d.product_key
		GROUP BY d.product_name
		--ORDER BY Total_Revenue DESC will throw an error as its an invalid use and already ordered 
		)t
WHERE rank_products <=5


--Using TOP 10 DESC and TOP 3 ASC
--21. Find the TOP-10 customers who have generated the highest revenue ?
SELECT TOP 10
d.customer_key,
d.first_name,
d.last_name,
SUM(f.sales_amount) AS Total_Revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers d 
ON f.customer_key = d.customer_key
GROUP BY d.customer_key,d.first_name,d.last_name
ORDER BY Total_Revenue DESC

SELECT * 
FROM (
		SELECT
		d.customer_key,
		d.first_name,
		d.last_name,
		SUM(f.sales_amount) AS Total_Revenue,
		ROW_NUMBER() OVER (ORDER BY SUM(f.sales_amount) DESC) AS rank_customers
		FROM gold.fact_sales f
		LEFT JOIN gold.dim_customers d
		ON f.customer_key = d.customer_key
		GROUP BY d.customer_key,d.first_name,d.last_name
		)t
WHERE rank_customers <= 10

--Find the 3 customers with fewer orders placed
SELECT TOP 3
d.customer_key,
d.first_name,
d.last_name,
COUNT(DISTINCT f.order_number) AS Total_Orders
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers d 
ON f.customer_key = d.customer_key
GROUP BY d.customer_key,d.first_name,d.last_name
ORDER BY Total_Orders ASC

SELECT * 
FROM (
		SELECT
		d.customer_key,
		d.first_name,
		d.last_name,
		COUNT(DISTINCT f.order_number) AS Total_Orders,
		ROW_NUMBER() OVER (ORDER BY COUNT(DISTINCT f.order_number) ASC) AS rank_orders
		FROM gold.fact_sales f
		LEFT JOIN gold.dim_customers d
		ON f.customer_key = d.customer_key
		GROUP BY d.customer_key,d.first_name,d.last_name
		)t
WHERE rank_orders <= 3